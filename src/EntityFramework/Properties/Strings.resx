<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentIsEmpty" xml:space="preserve">
    <value>The string argument '{argumentName}' cannot be empty.</value>
  </data>
  <data name="CircularDependency" xml:space="preserve">
    <value>A circular model foreign key dependency was detected: {cycle}.</value>
  </data>
  <data name="InvalidEnumValue" xml:space="preserve">
    <value>The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.</value>
  </data>
  <data name="InvalidPropertiesExpression" xml:space="preserve">
    <value>The properties expression '{expression}' is not valid. The expression should represent a property access: 't =&gt; t.MyProperty'. When specifying multiple properties use an anonymous type: 't =&gt; new {{ t.MyProperty1, t.MyProperty2 }}'.</value>
  </data>
  <data name="InvalidPropertyExpression" xml:space="preserve">
    <value>The expression '{expression}' is not a valid property expression. The expression should represent a property access: 't =&gt; t.MyProperty'.</value>
  </data>
  <data name="IdentityConflict" xml:space="preserve">
    <value>The instance of entity type '{entityType}' cannot be tracked because another instance of this type with the same key is already being tracked. For new entities consider using an IIdentityGenerator to generate unique key values.</value>
  </data>
  <data name="NullPrimaryKey" xml:space="preserve">
    <value>The instance of entity type '{entityType}' cannot be tracked because it has a null primary key. Either set the key explicitly or consider using an IValueGenerator to generate unique key values.</value>
  </data>
  <data name="WrongStateManager" xml:space="preserve">
    <value>Cannot start tracking StateEntry for entity type '{entityType}' because it was created by a different StateManager instance.</value>
  </data>
  <data name="MultipleStateEntries" xml:space="preserve">
    <value>Cannot start tracking StateEntry for entity type '{entityType}' because another StateEntry is already tracking the same entity.</value>
  </data>
  <data name="EntityTypeNotFound" xml:space="preserve">
    <value>The entity type '{entityType}' was not found. Ensure that the entity type '{entityType}' has been added to the model.</value>
  </data>
  <data name="PropertyNotFound" xml:space="preserve">
    <value>The property '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists and has been included in the model.</value>
  </data>
  <data name="EmptySequence" xml:space="preserve">
    <value>Sequence contains no elements.</value>
  </data>
  <data name="MoreThanOneElement" xml:space="preserve">
    <value>Sequence contains more than one element.</value>
  </data>
  <data name="MoreThanOneMatch" xml:space="preserve">
    <value>Sequence contains more than one matching element.</value>
  </data>
  <data name="NoMatch" xml:space="preserve">
    <value>Sequence contains no matching element.</value>
  </data>
  <data name="CollectionArgumentIsEmpty" xml:space="preserve">
    <value>The collection argument '{argumentName}' must contain at least one element.</value>
  </data>
  <data name="InconsistentEntityType" xml:space="preserve">
    <value>The properties provided for the argument '{argumentName}' are declared on different entity types.</value>
  </data>
  <data name="EntityRequiresKey" xml:space="preserve">
    <value>The entity type '{entityType}' requires a key to be defined.</value>
  </data>
  <data name="KeyPropertiesWrongEntity" xml:space="preserve">
    <value>The specified key properties are not declared on the entity type '{entityType}'. Ensure key properties are declared on the target entity type.</value>
  </data>
  <data name="ForeignKeyPropertiesWrongEntity" xml:space="preserve">
    <value>The specified foreign key properties are not declared on the entity type '{entityType}'. Ensure foreign key properties are declared on the target entity type.</value>
  </data>
  <data name="IndexPropertiesWrongEntity" xml:space="preserve">
    <value>The specified index properties are not declared on the entity type '{entityType}'. Ensure index properties are declared on the target entity type.</value>
  </data>
  <data name="IQueryableNotAsync" xml:space="preserve">
    <value>The source IQueryable doesn't implement IAsyncEnumerable{genericParameter}. Only sources that implement IAsyncEnumerable can be used for Entity Framework asynchronous operations.</value>
  </data>
  <data name="IQueryableProviderNotAsync" xml:space="preserve">
    <value>The provider for the source IQueryable doesn't implement IAsyncQueryProvider. Only providers that implement IEntityQueryProvider can be used for Entity Framework asynchronous operations.</value>
  </data>
  <data name="EagerOriginalValuesRequired" xml:space="preserve">
    <value>Lazy original value tracking cannot be turned on for entity type '{entityType}'. Entities that do not implement both INotifyPropertyChanging and INotifyPropertyChanged require original values to be stored eagerly in order to correct detect changes made to entities.</value>
  </data>
  <data name="OriginalValueNotTracked" xml:space="preserve">
    <value>The original value for property '{property}' of entity type '{entityType}' cannot be accessed because it is not being tracked. To access all original values set 'UseLazyOriginalValues' to false on the entity type.</value>
  </data>
  <data name="MissingBackingField" xml:space="preserve">
    <value>The property '{entityType}.{property}' is annotated with backing field '{field}' but that field cannot be found.</value>
  </data>
  <data name="BadBackingFieldType" xml:space="preserve">
    <value>The annotated backing field '{field}' of type '{fieldType}' cannot be used for the property '{entityType}.{property}' of type '{propertyType}'. Only backing fields of types that are assignable from the property type can be used.</value>
  </data>
  <data name="NoFieldOrSetter" xml:space="preserve">
    <value>No backing field could be discovered for property '{entityType}.{property}' and the property does not have a setter. Either use a backing field name that can be matched by convention, annotate the property with a backing field, or define a property setter.</value>
  </data>
  <data name="NoClrType" xml:space="preserve">
    <value>The CLR entity materializer cannot be used for entity type '{entityType}' because it is a shadow-state entity type.  Materialization to a CLR type is only possible for entity types that have a corresponding CLR type.</value>
  </data>
  <data name="MultipleDataStoresConfigured" xml:space="preserve">
    <value>The data stores {storeNames}are configured. A context can only be configured to use a single data store.</value>
  </data>
  <data name="NoDataStoreConfigured" xml:space="preserve">
    <value>No data stores are configured. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.</value>
  </data>
  <data name="NoDataStoreService" xml:space="preserve">
    <value>No data stores are available. Ensure that data store services are added inside the call to AddEntityFramework on your ServiceCollection.</value>
  </data>
  <data name="MultipleDataStoresAvailable" xml:space="preserve">
    <value>The data stores {storeNames}are available. A context can only be configured to use a single data store. Configure a data store using OnConfiguring or by creating an ImmutableDbContextOptions with a data store configured and passing it to the context.</value>
  </data>
  <data name="EntityConfigurationLocked" xml:space="preserve">
    <value>Cannot change the ImmutableDbContextOptions by calling '{memberName}' because it is locked. Use ImmutableDbContextOptionsBuilder to create ImmutableDbContextOptionss.</value>
  </data>
  <data name="MultiplePropertiesMatchedAsKeys" xml:space="preserve">
    <value>Multiple potential primary key properties named '{property}' but differing only by case were found on entity type '{entityType}'. Configure the primary key explicitly using the SetKey fluent API.</value>
  </data>
  <data name="NoValueGenerator" xml:space="preserve">
    <value>No {generator} value generator has been configured for property '{entityType}.{propertyName}'. To use value generation for properties of type '{propertyType}' the data store must configure an appropriate value generator.</value>
  </data>
  <data name="PropertyWithStorageNameNotFound" xml:space="preserve">
    <value>A property with the storage name '{property}' on entity type '{entityType}' could not be found. Ensure that the property exists, has been included in the model, and has been configured with storage name specified.</value>
  </data>
  <data name="CurrentValuesAlwaysInSync" xml:space="preserve">
    <value>CurrentValues are always in sync with the entity state.</value>
  </data>
  <data name="DataStoreException" xml:space="preserve">
    <value>An error occured while running a data store operation. See InnerException for details.</value>
  </data>
  <data name="LogExceptionDuringQueryIteration" xml:space="preserve">
    <value>An exception occurred in the data store while iterating the results of a query.</value>
  </data>
  <data name="LogExceptionDuringSaveChanges" xml:space="preserve">
    <value>An exception occurred in the data store while saving changes.</value>
  </data>
  <data name="PropertyExtensionInvoked" xml:space="preserve">
    <value>The Property&amp;lt;T&amp;gt; extension method may only be used within LINQ queries.</value>
  </data>
</root>